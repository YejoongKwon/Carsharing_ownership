#(popgrbcpct)popgrbcpc를 % 변수로 변환
avail_reg$popgrbcpct<-(avail_reg$popgrbc)*100
length(unique(avail_reg$sidosigungu))
###강건성 검정으로 채택함
form12<-treat~ oil_realprice+lCityDensity+GRDP.pc+popgrbcpct+citypoppct
#original: form13
w_avail <- weightit(form12,data = avail_reg, method = "ps", estimand = "ATE")
summary(w_avail)
table_w_avail<- bal.tab(w_avail, stats = c("m"), thresholds = c(m = 0.2))
table_w_avail
#create weighted dataset
avail_reg1 <- avail_reg
avail_reg1$w_avail <- w_avail$weights
options("scipen"=100, "digits"=2)
design_avail <- svydesign(ids=~0, data=avail_reg1, weights=~w_avail)
rgldvall.thousandpc.int.availability <- svyglm(rgldvall.thousandpc~treat*good+treat*bad+oil_realprice+lCityDensity+GRDP.pc+popgrbcpct+citypoppct, design = design_avail)
rgldvprivate.thousandpc.int.availability <- svyglm(rgldvprivate.thousandpc~treat*good+treat*bad+oil_realprice+lCityDensity+GRDP.pc+popgrbcpct+citypoppct, design = design_avail)
format(summary(rgldvall.thousandpc.int.availability)$coefficients[,1],digits=4)
format(summary(rgldvall.thousandpc.int.availability)$coefficients[,2],digits=3)
format(summary(rgldvall.thousandpc.int.availability)$coefficients[,2],digits=2)
format(summary(rgldvprivate.thousandpc.int.availability)$coefficients[,1],digits=4)
format(summary(rgldvprivate.thousandpc.int.availability)$coefficients[,2],digits=3)
rgldvprivate.thousandpc.int.availability <- svyglm(rgldvprivate.thousandpc~treat*good+treat*bad+oil_realprice+lCityDensity+GRDP.pc+popgrbcpct+citypoppct, design = design_avail)
summary(rgldvprivate.thousandpc.int.availability)
format(summary(rgldvprivate.thousandpc.int.availability)$coefficients[,1],digits=4)
format(summary(rgldvprivate.thousandpc.int.availability)$coefficients[,2],digits=3)
rsq(rgldvprivate.thousandpc.int.availability)
rsq.kl(rgldvprivate.thousandpc.int.availability)
rsq(rgldvall.thousandpc.int.availability)
summary(rgldvall.thousandpc.int.availability)
attached_paravkm<-read_excel("주행거리_ver3.xlsx")
#(citypoppct)Citypop을도시거주인구 비중으로 변환
attached_paravkm$citypoppct<-100*attached_paravkm$CityPop/attached_paravkm$Pop
attached_paravkm$loilprice<-log(attached_paravkm$oil_realprice)
#종속변수 unit를 천 km에서 '10만(hundred thousand)km' 로 변환
attached_paravkm$vkm_ldv_private.ht<-attached_paravkm$vkm_ldv_private/100
attached_paravkm$vkm_ldv_all.ht<-attached_paravkm$vkm_ldv_all/100
#(popgrbcperthous)popgrbc를 천인당 304050인구수로변환
attached_paravkm$popgrbcperthous<-(attached_paravkm$popgrbc)*(attached_paravkm$Pop)*1000
#(popgrbcpct)popgrbcpc를 % 변수로 변환
attached_paravkm$popgrbcpct<-(attached_paravkm$popgrbc)*100
form9<-treat~ oil_realprice+lCityDensity+GRDP.pc+popgrbcpct+citypoppct#(form7에서 lpop 없앰)
#original: form7
w_vkm_pc <- weightit(form9,data = attached_paravkm, method = "ps", estimand = "ATE")
summary(w_vkm_pc)
table_weighvkm_nolog<- bal.tab(w_vkm_pc, stats = c("m"), thresholds = c(m = 0.2))
table_weighvkm_nolog
vkm_Balance<-table_weighvkm_nolog$Balance
vkm_Balance <- tibble::rownames_to_column(vkm_Balance, "index")
vkm_ldv_all.pc.bin <- svyglm(vkm_ldv_all.ht~treat+oil_realprice+lCityDensity+GRDP.pc+popgrbcpct+citypoppct,design = design.ps_pcvkm)
#create weighted dataset
attached_paravkm1 <- attached_paravkm
attached_paravkm1$w_vkm_pc <- w_vkm_pc$weights
options("scipen"=100, "digits"=2)
design.ps_pcvkm <- svydesign(ids=~0, data=attached_paravkm1, weights=~w_vkm_pc)
vkm_ldv_all.pc.bin <- svyglm(vkm_ldv_all.ht~treat+oil_realprice+lCityDensity+GRDP.pc+popgrbcpct+citypoppct,design = design.ps_pcvkm)
summary(vkm_ldv_all.pc.bin)
vkm_ldv_all.pc.int.CityScale <- svyglm(vkm_ldv_all.ht~treat*urban+treat*rural+ oil_realprice+lCityDensity+GRDP.pc+popgrbcpct+citypoppct,design = design.ps_pcvkm)
summary(vkm_ldv_all.pc.int.CityScale)
vkm_ldv_private.pc.int.CityScale <- svyglm(vkm_ldv_private.ht~treat*urban+treat*rural+ oil_realprice+lCityDensity+GRDP.pc+popgrbcpct+citypoppct
, design = design.ps_pcvkm)
summary(vkm_ldv_private.pc.int.CityScale)
rsq(vkm_ldv_private.pc.int.CityScale)
rsq(vkm_ldv_private.pc.int.CityScale)
rsq(vkm_ldv_all.pc.int.CityScale)
format(summary(vkm_ldv_private.pc.int.CityScale)$coefficients[,1],digits=4)
format(summary(vkm_ldv_private.pc.int.CityScale)$coefficients[,2],digits=3)
format(summary(vkm_ldv_all.pc.int.CityScale)$coefficients[,1],digits=4)
format(summary(vkm_ldv_all.pc.int.CityScale)$coefficients[,2],digits=3)
format(summary(vkm_ldv_private.pc.int.CityScale)$coefficients[,1],digits=4)
format(summary(vkm_ldv_private.pc.int.CityScale)$coefficients[,2],digits=3)
attached_paravkm<-read_excel("주행거리_ver3.xlsx")
#(citypoppct)Citypop을도시거주인구 비중으로 변환
attached_paravkm$citypoppct<-100*attached_paravkm$CityPop/attached_paravkm$Pop
attached_paravkm$loilprice<-log(attached_paravkm$oil_realprice)
#종속변수 unit를 천 km에서 '10만(hundred thousand)km' 로 변환
attached_paravkm$vkm_ldv_private.ht<-attached_paravkm$vkm_ldv_private/100
attached_paravkm$vkm_ldv_all.ht<-attached_paravkm$vkm_ldv_all/100
#(popgrbcperthous)popgrbc를 천인당 304050인구수로변환
attached_paravkm$popgrbcperthous<-(attached_paravkm$popgrbc)*(attached_paravkm$Pop)*1000
#(popgrbcpct)popgrbcpc를 % 변수로 변환
attached_paravkm$popgrbcpct<-(attached_paravkm$popgrbc)*100
form7<-treat~ lpop+oil_realprice+lCityDensity+GRDP.pc+popgrbcpct+citypoppct#(현재까지 가장 그럴듯한 결과)
form8<- treat~lpop+oil_realprice+lCityDensity+lGRDP.pc+popgrbc+citypopratio+Unempperthous
form9<-treat~ oil_realprice+lCityDensity+GRDP.pc+popgrbcpct+citypoppct#(form7에서 lpop 없앰)
form10<-treat~Pop+oil_realprice+lCityDensity+GRDP.pc+popgrbc+citypopratio+marriagerate
form11<-treat~ oil_realprice+lCityDensity+GRDP.pc+popgrbc+citypopratio+marriagerate
form13<-treat~Pop+ oil_realprice+CityDensity+GRDP.pc+popgrbcpct+citypoppct+Unempperthous#(form9에서 Unempperthousand 삽입)
#oil_realprice를 log 취해줌
#attached_paravkm <- attached_paravkm[!(attached_paravkm$year_ %in% c("2009", "2010","2011")),]
#original: form7
w_vkm_pc <- weightit(form9,data = attached_paravkm, method = "ps", estimand = "ATE")
summary(w_vkm_pc)
table_weighvkm_nolog<- bal.tab(w_vkm_pc, stats = c("m"), thresholds = c(m = 0.2))
table_weighvkm_nolog
vkm_Balance<-table_weighvkm_nolog$Balance
vkm_Balance <- tibble::rownames_to_column(vkm_Balance, "index")
#Weightbalance<-as.data.frame(rbind(reg_Balance,vkm_Balance))
#write.xlsx(Weightbalance,"Weightbalance.xlsx")
#ATE 방법으로 진행시킴
#create weighted dataset
attached_paravkm1 <- attached_paravkm
attached_paravkm1$w_vkm_pc <- w_vkm_pc$weights
#options("scipen"=100, "digits"=2)
design.ps_pcvkm <- svydesign(ids=~0, data=attached_paravkm1, weights=~w_vkm_pc)
'
model_vkm<-glm(form7, family="binomial",data=attached_paravkm1)
attached_paravkm1$ps<-model_vkm$fitted.values
#show row if w_reg_pc>=50
attached_paravkm2<-subset(attached_paravkm1, !(w_vkm_pc >= 50))
before_ate<-ggplot(data=attached_paravkm2, aes(x=ps))+geom_density(aes(fill=factor(treat)),alpha=0.3)+ggtitle("가중치 부여 전")+My_Theme2+theme(plot.title = element_text(size = 25))+ylim(0,4)
after_ate<-ggplot(data=attached_paravkm2, aes(x=ps,weight=w_vkm_pc))+geom_density(aes(fill=factor(treat)),alpha=0.3)+ggtitle("가중치 부여 후")+My_Theme2+theme(plot.title = element_text(size = 25))+ylim(0,4)
grid.arrange(before_ate,after_ate, ncol=2)
ggsave("bfate_vkm.png", grid.arrange(before_ate,after_ate, ncol=2))
'
###2-1.전체차량 주행거리
vkm_ldv_all.pc.bint <- svyglm(vkm_ldv_all.ht~treat+oil_realprice+lCityDensity+GRDP.pc+popgrbcpct+citypoppct+factor(t)
, design = design.ps_pcvkm)
vkm_ldv_all.pc.bin <- svyglm(vkm_ldv_all.ht~treat+oil_realprice+lCityDensity+GRDP.pc+popgrbcpct+citypoppct,design = design.ps_pcvkm)
summary(vkm_ldv_all.pc.bin)
format(summary(vkm_ldv_private.pc.bin)$coefficients[,1],digits=4)
format(summary(vkm_ldv_all.pc.int.CityScale)$coefficients[,1],digits=4)
format(summary(vkm_ldv_all.pc.int.CityScale)$coefficients[,2],digits=3)
vkm_ldv_all.pc.int.CityScale <- svyglm(vkm_ldv_all.ht~treat*urban+treat*rural+ oil_realprice+lCityDensity+GRDP.pc+popgrbcpct+citypoppct,design = design.ps_pcvkm)
summary(vkm_ldv_all.pc.int.CityScale)
format(summary(vkm_ldv_all.pc.int.CityScale)$coefficients[,1],digits=4)
format(summary(vkm_ldv_all.pc.int.CityScale)$coefficients[,2],digits=3)
format(summary(vkm_ldv_all.pc.int.CityScale)$coefficients[,1],digits=6)
format(summary(vkm_ldv_all.pc.int.CityScale)$coefficients[,2],digits=4)
format(summary(vkm_ldv_all.pc.int.CityScale)$coefficients[,2],digits=5)
format(summary(vkm_ldv_all.pc.int.CityScale)$coefficients[,1],digits=6)
format(summary(vkm_ldv_all.pc.int.CityScale)$coefficients[,2],digits=5)
vkm_ldv_private.pc.int.CityScale <- svyglm(vkm_ldv_private.ht~treat*urban+treat*rural+ oil_realprice+lCityDensity+GRDP.pc+popgrbcpct+citypoppct
, design = design.ps_pcvkm)
summary(vkm_ldv_private.pc.int.CityScale)
format(summary(vkm_ldv_private.pc.int.CityScale)$coefficients[,1],digits=6)
format(summary(vkm_ldv_private.pc.int.CityScale)$coefficients[,2],digits=5)
rsq(vkm_ldv_all.pc.int.CityScale)
rsq(vkm_ldv_private.pc.int.CityScale)
####1. 등록대수-접근성 모형----
avail_reg<-read_excel("등록대수_접근성df_new.xlsx")
avail_vkm<-read_excel("주행거리_접근성df_new.xlsx")
#(citypoppct)Citypop을도시거주인구 비중으로 변환
avail_vkm$citypoppct<-100*avail_vkm$CityPop/avail_vkm$Pop
avail_vkm$loilprice<-log(avail_vkm$oil_realprice)
#종속변수 unit를 천 km에서 '10만(hundred thousand)km' 로 변환
avail_vkm$vkm_ldv_private.ht<-avail_vkm$vkm_ldv_private/100
avail_vkm$vkm_ldv_all.ht<-avail_vkm$vkm_ldv_all/100
#(popgrbcperthous)popgrbc를 천인당 304050인구수로변환
avail_vkm$popgrbcperthous<-(avail_vkm$popgrbc)*(avail_vkm$Pop)*1000
#(popgrbcpct)popgrbcpc를 % 변수로 변환
avail_vkm$popgrbcpct<-(avail_vkm$popgrbc)*100
form9<-treat~ oil_realprice+lCityDensity+GRDP.pc+popgrbcpct+citypoppct#(form7에서 lpop 없앰)
w_avail_vkm <- weightit(form9,data = avail_vkm, method = "ps", estimand = "ATE")
summary(w_avail_vkm)
table_w_avail_vkm<- bal.tab(w_avail_vkm, stats = c("m"), thresholds = c(m = 0.2))
table_w_avail_vkm
#create weighted dataset
avil_vkm1 <- avail_vkm
avil_vkm1$w_avail_vkm <- w_avail_vkm$weights
design_availvkm <- svydesign(ids=~0, data=avil_vkm1, weights=~w_avail_vkm)
vkm_ldv_all.pc.int.availability <- svyglm(vkm_ldv_all.ht~treat*good+treat*bad+ oil_realprice+lCityDensity+GRDP.pc+popgrbcpct+citypoppct,design = design_availvkm)
summary(vkm_ldv_all.pc.int.availability)
vkm_ldv_private.pc.int.availability <- svyglm(vkm_ldv_private.ht~treat*good+treat*bad+ oil_realprice+lCityDensity+GRDP.pc+popgrbcpct+citypoppct,design = design_availvkm)
summary(vkm_ldv_private.pc.int.availability)
format(summary(vkm_ldv_private.pc.int.availability)$coefficients[,1],digits=4)
format(summary(vkm_ldv_private.pc.int.availability)$coefficients[,2],digits=3)
format(summary(vkm_ldv_private.pc.int.availability)$coefficients[,1],digits=6)
format(summary(vkm_ldv_private.pc.int.availability)$coefficients[,1],digits=5)
format(summary(vkm_ldv_private.pc.int.availability)$coefficients[,2],digits=3)
format(summary(vkm_ldv_private.pc.int.availability)$coefficients[,2],digits=4)
format(summary(vkm_ldv_private.pc.int.availability)$coefficients[,1],digits=5)
format(summary(vkm_ldv_all.pc.int.availability)$coefficients[,1],digits=5)
format(summary(vkm_ldv_all.pc.int.availability)$coefficients[,2],digits=4)
format(summary(vkm_ldv_all.pc.int.availability)$coefficients[,2],digits=5)
format(summary(vkm_ldv_all.pc.int.availability)$coefficients[,1],digits=5)
format(summary(vkm_ldv_all.pc.int.availability)$coefficients[,2],digits=5)
format(summary(vkm_ldv_private.pc.int.availability)$coefficients[,1],digits=5)
format(summary(vkm_ldv_private.pc.int.availability)$coefficients[,2],digits=5)
summary(vkm_ldv_all.pc.int.availability)
rsq(vkm_ldv_all.pc.int.availability)
rsq(vkm_ldv_private.pc.int.availability)
summary(vkm_ldv_private.pc.int.availability)
rsq(vkm_ldv_private.pc.int.availability)
packages <- c("broom","rsq","cobalt","WeightIt","lme4","tidyverse","psych","stargazer","dplyr","ggplot2", "readxl", "caret", "tidyr", "stringr", "zoo", "purrr", "reshape2", "openxlsx", "ggthemes", "ggrepel","ggcorrplot","gridExtra","MatchIt","moonBook","survey","tableone")
invisible(lapply(packages, library, character.only = TRUE))
attached_parareg<-read_excel("등록대수_ver3.xlsx")
options("scipen"=100, "digits"=2)
#(citypoppct)Citypop을도시거주인구 비중으로 변환
attached_parareg$citypoppct<-100*attached_parareg$CityPop/attached_parareg$Pop
#(popgrbcperthous)popgrbc를 천인당 304050인구수로변환
attached_parareg$popgrbcperthous<-(attached_parareg$popgrbc)*(attached_parareg$Pop)*1000
#(popgrbcpct)popgrbcpc를 % 변수로 변환
attached_parareg$popgrbcpct<-(attached_parareg$popgrbc)*100
length(unique(attached_parareg$sidosigungu))
###강건성 검정으로 채택함
form12<-treat~ oil_realprice+lCityDensity+GRDP.pc+popgrbcpct+citypoppct
#####현재까지 원하는 결과 나온것임.----
form13<-treat~ oil_realprice+lCityDensity+GRDP.pc+popgrbcpct+citypoppct+Unemployment#(form12에서 Unemployment 삽입)
#1. 천인당등록대수----
#original : form13
w_reg_pc <- weightit(form13,data = attached_parareg, method = "ps", estimand = "ATE")
summary(w_reg_pc)
table_weightreg_nolog<- bal.tab(w_reg_pc, stats = c("m"), thresholds = c(m = 0.2))
table_weightreg_nolog
reg_Balance<-table_weightreg_nolog$Balance
reg_samplesize<-table_weightreg_nolog$Observations
reg_Balance <- tibble::rownames_to_column(reg_Balance, "index")
#create weighted dataset
attached_parareg1 <- attached_parareg
attached_parareg1$w_reg_pc <- w_reg_pc$weights
design.ps_pcreg <- svydesign(ids=~0, data=attached_parareg1, weights=~w_reg_pc)
#Pop+oil_realprice+CityDensity+GRDP.pc+popgrbc+citypopratio+Unemployment
###1-1. 전체차량천인당등록대수----
'
model_reg<-glm(form13, family="binomial",data=attached_parareg1)
attached_parareg1$ps<-model_reg$fitted.values
#show row if w_reg_pc>=50
attached_parareg2<-subset(attached_parareg1, !(w_reg_pc >= 50))
before_ate<-ggplot(data=attached_parareg2, aes(x=ps))+geom_density(aes(fill=factor(treat)),alpha=0.3)+ggtitle("가중치 부여 전")+My_Theme2+theme(plot.title = element_text(size = 25))+ylim(0,4)
after_ate<-ggplot(data=attached_parareg2, aes(x=ps,weight=w_reg_pc))+geom_density(aes(fill=factor(treat)),alpha=0.3)+ggtitle("가중치 부여 후")+My_Theme2+theme(plot.title = element_text(size = 25))+ylim(0,4)
grid.arrange(before_ate,after_ate, ncol=2)
ggsave("bfate_reg.png", grid.arrange(before_ate,after_ate, ncol=2))
'
rgldvall.thousandpc.bin <- svyglm(rgldvall.thousandpc~treat+oil_realprice+lCityDensity+GRDP.pc+popgrbcpct+citypoppct+Unemployment, design = design.ps_pcreg)
summary(rgldvprivate.thousandpc.bin)
rsq(rgldvprivate.thousandpc.bin)
#주유소휘발유가격이 차량등록대수에 가장 유의한 영향을 미침
#영향력의 크기는 4050대 인구비중이 가장 큼
rgldvall.thousandpc.int.CityScale <- svyglm(rgldvall.thousandpc~treat*urban+treat*rural+oil_realprice+lCityDensity+GRDP.pc+popgrbcpct+citypoppct+Unemployment, design = design.ps_pcreg)
summary(rgldvprivate.thousandpc.int.CityScale)
#주유소휘발유가격이 차량등록대수에 가장 유의한 영향을 미침
#영향력의 크기는 4050대 인구비중이 가장 큼
rgldvall.thousandpc.int.CityScale <- svyglm(rgldvall.thousandpc~treat*urban+treat*rural+oil_realprice+lCityDensity+GRDP.pc+popgrbcpct+citypoppct+Unemployment, design = design.ps_pcreg)
summary(rgldvprivate.thousandpc.int.CityScale)
summary(rgldvall.thousandpc.int.CityScale)
rgldvprivate.thousandpc.int.CityScale_coef_vals <- as.numeric(format(summary(rgldvprivate.thousandpc.int.CityScale)$coefficients[,1],digits=4))
summary(rgldvprivate.thousandpc.int.CityScale)
#대부분의 변수가 유의하게 나타남
rgldvprivate.thousandpc.int.CityScale <- svyglm(rgldvprivate.thousandpc~treat*urban+treat*rural+oil_realprice+lCityDensity+GRDP.pc+popgrbcpct+citypoppct+Unemployment, design = design.ps_pcreg)
summary(rgldvprivate.thousandpc.int.CityScale)
#treat*urban도시화 지역이 높은곳에서 인구천인당자가용등록대수가 유의하게 감소함
rsq(rgldvprivate.thousandpc.int.CityScale)
packages <- c("broom","rsq","cobalt","WeightIt","lme4","tidyverse","psych","stargazer","dplyr","ggplot2", "readxl", "caret", "tidyr", "stringr", "zoo", "purrr", "reshape2", "openxlsx", "ggthemes", "ggrepel","ggcorrplot","gridExtra","MatchIt","moonBook","survey","tableone")
invisible(lapply(packages, library, character.only = TRUE))
attached_parareg<-read_excel("등록대수_ver3.xlsx")
options("scipen"=100, "digits"=2)
#(citypoppct)Citypop을도시거주인구 비중으로 변환
attached_parareg$citypoppct<-100*attached_parareg$CityPop/attached_parareg$Pop
#(popgrbcperthous)popgrbc를 천인당 304050인구수로변환
attached_parareg$popgrbcperthous<-(attached_parareg$popgrbc)*(attached_parareg$Pop)*1000
#(popgrbcpct)popgrbcpc를 % 변수로 변환
attached_parareg$popgrbcpct<-(attached_parareg$popgrbc)*100
length(unique(attached_parareg$sidosigungu))
listY <- c('rgldvall.thousandpc','rgldvprivate.thousandpc','oil_realprice', 'GRDP.pc', 'CityDensity', 'popgrbcpct','citypoppct', 'Unempperthous')
listYname<-c('천인당전체차량등록대수','천인당자가용등록대수','휘발유가격','인당GRDP','인구밀도','30~50대인구비중','도시지역인구비중','천인당실업자수')
plots <- list()
# loop through each y variable and create a plot
for (i in 1:length(listY)) {
yvar <- listY[i]
q <- quantile(attached_parareg[[yvar]], c(0.25, 0.75), na.rm = TRUE)
iqr <- q[2] - q[1]
lim <- c(q[1] - 1.5 * iqr, q[2] + 1.5 * iqr)
plot <- ggplot(data = attached_parareg, aes(x = cityscale, y = !!sym(yvar))) +
geom_boxplot(outlier.shape = NA) +
labs(x = "도시화정도", y = listYname[match(listY[i], listY)]) +
#labs(x = "도시화정도", y = yvar) +
#ggtitle(paste0("도시화 정도와 ", yvar))+
ylim(lim[1], lim[2])+
#ylim(0, 30000000) +
theme_bw()+
scale_color_stata()  #theme(
#  axis.title.x = element_text(size = 20),
#   axis.text.x = element_text(size = 20),
#   axis.title.y = element_text(size = 20)
#)
plots[[i]] <- plot
}
Boxplot_bycityscale<-gridExtra::grid.arrange(
grobs = lapply(plots, ggplotGrob),
ncol = 2,
top = "Boxplots of y variables by city scale",
bottom = "Source: attached_parareg dataset"
) + facet_grid(. ~ yvar)
####1. 등록대수-접근성 모형----
avail_reg<-read_excel("등록대수_접근성df_new.xlsx")
#(citypoppct)Citypop을도시거주인구 비중으로 변환
avail_reg$citypoppct<-100*avail_reg$CityPop/avail_reg$Pop
#(popgrbcperthous)popgrbc를 천인당 304050인구수로변환
avail_reg$popgrbcperthous<-(avail_reg$popgrbc)*(avail_reg$Pop)*1000
#(popgrbcpct)popgrbcpc를 % 변수로 변환
avail_reg$popgrbcpct<-(avail_reg$popgrbc)*100
length(unique(avail_reg$sidosigungu))
listY <- c('rgldvall.thousandpc','rgldvprivate.thousandpc','oil_realprice', 'GRDP.pc', 'CityDensity', 'popgrbcpct','citypoppct', 'Unempperthous')
listYname<-c('천인당전체차량등록대수','천인당자가용등록대수','휘발유가격','인당GRDP','인구밀도','30~50대인구비중','도시지역인구비중','천인당실업자수')
plots <- list()
# loop through each y variable and create a plot
for (i in 1:length(listY)) {
yvar <- listY[i]
q <- quantile(attached_parareg[[yvar]], c(0.25, 0.75), na.rm = TRUE)
iqr <- q[2] - q[1]
lim <- c(q[1] - 1.5 * iqr, q[2] + 1.5 * iqr)
plot <- ggplot(data = avail_reg, aes(x = availiability, y = !!sym(yvar))) +
geom_boxplot(outlier.shape = NA) +
labs(x = "차고지접근성", y = listYname[match(listY[i], listY)]) +
#labs(x = "도시화정도", y = yvar) +
#ggtitle(paste0("도시화 정도와 ", yvar))+
ylim(lim[1], lim[2])+
#ylim(0, 30000000) +
theme_bw()+
scale_color_stata()  #theme(
#  axis.title.x = element_text(size = 20),
#   axis.text.x = element_text(size = 20),
#   axis.title.y = element_text(size = 20)
#)
plots[[i]] <- plot
}
yvar <- listY[i]
# loop through each y variable and create a plot
for (i in 1:length(listY)) {
yvar <- listY[i]
q <- quantile(avail_reg[[yvar]], c(0.25, 0.75), na.rm = TRUE)
iqr <- q[2] - q[1]
lim <- c(q[1] - 1.5 * iqr, q[2] + 1.5 * iqr)
plot <- ggplot(data = avail_reg, aes(x = availiability, y = !!sym(yvar))) +
geom_boxplot(outlier.shape = NA) +
labs(x = "차고지접근성", y = listYname[match(listY[i], listY)]) +
#labs(x = "도시화정도", y = yvar) +
#ggtitle(paste0("도시화 정도와 ", yvar))+
ylim(lim[1], lim[2])+
#ylim(0, 30000000) +
theme_bw()+
scale_color_stata()  #theme(
#  axis.title.x = element_text(size = 20),
#   axis.text.x = element_text(size = 20),
#   axis.title.y = element_text(size = 20)
#)
plots[[i]] <- plot
}
Boxplot_byavailiability<-gridExtra::grid.arrange(
grobs = lapply(plots, ggplotGrob),
ncol = 2,
top = "Boxplots of y variables by service availability",
bottom = "Source: avail_reg dataset"
) + facet_grid(. ~ yvar)
listY <- c('rgldvall.thousandpc','rgldvprivate.thousandpc','oil_realprice', 'GRDP.pc', 'CityDensity', 'popgrbcpct','citypoppct', 'Unempperthous')
listYname<-c('천인당전체차량등록대수','천인당자가용등록대수','휘발유가격','인당GRDP','인구밀도','30~50대인구비중','도시지역인구비중','천인당실업자수')
plots <- list()
availability_levels <- c("bad", "soso", "good")
avail_reg$availiability <- factor(avail_reg$availiability, levels = availability_levels)
# loop through each y variable and create a plot
for (i in 1:length(listY)) {
yvar <- listY[i]
q <- quantile(avail_reg[[yvar]], c(0.25, 0.75), na.rm = TRUE)
iqr <- q[2] - q[1]
lim <- c(q[1] - 1.5 * iqr, q[2] + 1.5 * iqr)
plot <- ggplot(data = avail_reg, aes(x = availiability, y = !!sym(yvar))) +
geom_boxplot(outlier.shape = NA) +
labs(x = "차고지접근성", y = listYname[match(listY[i], listY)]) +
#labs(x = "도시화정도", y = yvar) +
#ggtitle(paste0("도시화 정도와 ", yvar))+
ylim(lim[1], lim[2])+
#ylim(0, 30000000) +
theme_bw()+
scale_color_stata()  #theme(
#  axis.title.x = element_text(size = 20),
#   axis.text.x = element_text(size = 20),
#   axis.title.y = element_text(size = 20)
#)
plots[[i]] <- plot
}
Boxplot_byavailiability<-gridExtra::grid.arrange(
grobs = lapply(plots, ggplotGrob),
ncol = 2,
top = "Boxplots of y variables by service availability",
bottom = "Source: avail_reg dataset"
) + facet_grid(. ~ yvar)
attached_parareg<-read_excel("등록대수_ver3.xlsx")
options("scipen"=100, "digits"=2)
#(citypoppct)Citypop을도시거주인구 비중으로 변환
attached_parareg$citypoppct<-100*attached_parareg$CityPop/attached_parareg$Pop
#(popgrbcperthous)popgrbc를 천인당 304050인구수로변환
attached_parareg$popgrbcperthous<-(attached_parareg$popgrbc)*(attached_parareg$Pop)*1000
#(popgrbcpct)popgrbcpc를 % 변수로 변환
attached_parareg$popgrbcpct<-(attached_parareg$popgrbc)*100
length(unique(attached_parareg$sidosigungu))
cityscale_levels <- c("rural", "avg", "urban")
avail_parareg$cityscale <- factor(avail_parareg$cityscale, levels = cityscale_levels)
# loop through each y variable and create a plot
for (i in 1:length(listY)) {
yvar <- listY[i]
q <- quantile(avail_parareg[[yvar]], c(0.25, 0.75), na.rm = TRUE)
iqr <- q[2] - q[1]
lim <- c(q[1] - 1.5 * iqr, q[2] + 1.5 * iqr)
plot <- ggplot(data = avail_parareg, aes(x = cityscale, y = !!sym(yvar))) +
geom_boxplot(outlier.shape = NA) +
labs(x = "도시화정도", y = listYname[match(listY[i], listY)]) +
#labs(x = "도시화정도", y = yvar) +
#ggtitle(paste0("도시화 정도와 ", yvar))+
ylim(lim[1], lim[2])+
#ylim(0, 30000000) +
theme_bw()+
scale_color_stata()  #theme(
#  axis.title.x = element_text(size = 20),
#   axis.text.x = element_text(size = 20),
#   axis.title.y = element_text(size = 20)
#)
plots[[i]] <- plot
}
Boxplot_bycityscale<-gridExtra::grid.arrange(
grobs = lapply(plots, ggplotGrob),
ncol = 2,
top = "Boxplots of y variables by cityscale",
bottom = "Source: avail_parareg dataset"
) + facet_grid(. ~ yvar)
cityscale_levels <- c("rural", "avg", "urban")
attached_parareg$cityscale <- factor(avail_parareg$cityscale, levels = cityscale_levels)
attached_parareg$cityscale <- factor(attached_parareg$cityscale, levels = cityscale_levels)
# loop through each y variable and create a plot
for (i in 1:length(listY)) {
yvar <- listY[i]
q <- quantile(avail_parareg[[yvar]], c(0.25, 0.75), na.rm = TRUE)
iqr <- q[2] - q[1]
lim <- c(q[1] - 1.5 * iqr, q[2] + 1.5 * iqr)
plot <- ggplot(data = avail_parareg, aes(x = cityscale, y = !!sym(yvar))) +
geom_boxplot(outlier.shape = NA) +
labs(x = "도시화정도", y = listYname[match(listY[i], listY)]) +
#labs(x = "도시화정도", y = yvar) +
#ggtitle(paste0("도시화 정도와 ", yvar))+
ylim(lim[1], lim[2])+
#ylim(0, 30000000) +
theme_bw()+
scale_color_stata()  #theme(
#  axis.title.x = element_text(size = 20),
#   axis.text.x = element_text(size = 20),
#   axis.title.y = element_text(size = 20)
#)
plots[[i]] <- plot
}
listY <- c('rgldvall.thousandpc','rgldvprivate.thousandpc','oil_realprice', 'GRDP.pc', 'CityDensity', 'popgrbcpct','citypoppct', 'Unempperthous')
listYname<-c('천인당전체차량등록대수','천인당자가용등록대수','휘발유가격','인당GRDP','인구밀도','30~50대인구비중','도시지역인구비중','천인당실업자수')
plots <- list()
cityscale_levels <- c("rural", "avg", "urban")
attached_parareg$cityscale <- factor(attached_parareg$cityscale, levels = cityscale_levels)
# loop through each y variable and create a plot
for (i in 1:length(listY)) {
yvar <- listY[i]
q <- quantile(avail_parareg[[yvar]], c(0.25, 0.75), na.rm = TRUE)
iqr <- q[2] - q[1]
lim <- c(q[1] - 1.5 * iqr, q[2] + 1.5 * iqr)
plot <- ggplot(data = avail_parareg, aes(x = cityscale, y = !!sym(yvar))) +
geom_boxplot(outlier.shape = NA) +
labs(x = "도시화정도", y = listYname[match(listY[i], listY)]) +
#labs(x = "도시화정도", y = yvar) +
#ggtitle(paste0("도시화 정도와 ", yvar))+
ylim(lim[1], lim[2])+
#ylim(0, 30000000) +
theme_bw()+
scale_color_stata()  #theme(
#  axis.title.x = element_text(size = 20),
#   axis.text.x = element_text(size = 20),
#   axis.title.y = element_text(size = 20)
#)
plots[[i]] <- plot
}
Boxplot_bycityscale<-gridExtra::grid.arrange(
grobs = lapply(plots, ggplotGrob),
ncol = 2,
top = "Boxplots of y variables by cityscale",
bottom = "Source: avail_parareg dataset"
) + facet_grid(. ~ yvar)
attached_parareg<-read_excel("등록대수_ver3.xlsx")
options("scipen"=100, "digits"=2)
#(citypoppct)Citypop을도시거주인구 비중으로 변환
attached_parareg$citypoppct<-100*attached_parareg$CityPop/attached_parareg$Pop
#(popgrbcperthous)popgrbc를 천인당 304050인구수로변환
attached_parareg$popgrbcperthous<-(attached_parareg$popgrbc)*(attached_parareg$Pop)*1000
#(popgrbcpct)popgrbcpc를 % 변수로 변환
attached_parareg$popgrbcpct<-(attached_parareg$popgrbc)*100
length(unique(attached_parareg$sidosigungu))
listY <- c('rgldvall.thousandpc','rgldvprivate.thousandpc','oil_realprice', 'GRDP.pc', 'CityDensity', 'popgrbcpct','citypoppct', 'Unempperthous')
listYname<-c('천인당전체차량등록대수','천인당자가용등록대수','휘발유가격','인당GRDP','인구밀도','30~50대인구비중','도시지역인구비중','천인당실업자수')
plots <- list()
cityscale_levels <- c("rural", "avg", "urban")
attached_parareg$cityscale <- factor(attached_parareg$cityscale, levels = cityscale_levels)
# loop through each y variable and create a plot
for (i in 1:length(listY)) {
yvar <- listY[i]
q <- quantile(attached_parareg[[yvar]], c(0.25, 0.75), na.rm = TRUE)
iqr <- q[2] - q[1]
lim <- c(q[1] - 1.5 * iqr, q[2] + 1.5 * iqr)
plot <- ggplot(data = attached_parareg, aes(x = cityscale, y = !!sym(yvar))) +
geom_boxplot(outlier.shape = NA) +
labs(x = "도시화정도", y = listYname[match(listY[i], listY)]) +
#labs(x = "도시화정도", y = yvar) +
#ggtitle(paste0("도시화 정도와 ", yvar))+
ylim(lim[1], lim[2])+
#ylim(0, 30000000) +
theme_bw()+
scale_color_stata()  #theme(
#  axis.title.x = element_text(size = 20),
#   axis.text.x = element_text(size = 20),
#   axis.title.y = element_text(size = 20)
#)
plots[[i]] <- plot
}
Boxplot_bycityscale<-gridExtra::grid.arrange(
grobs = lapply(plots, ggplotGrob),
ncol = 2,
top = "Boxplots of y variables by city scale",
bottom = "Source: attached_parareg dataset"
) + facet_grid(. ~ yvar)
